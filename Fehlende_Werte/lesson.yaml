- Class: meta
  Course: Statistiktutorium
  Lesson: Fehlende Werte
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat; Translation by PFH
  Version: 2.2.1

- Class: text
  Output: Fehlende Werte spielen in der Statistik und der Datenanalyse eine wichtige Rolle. In den meisten Fällen sollte man die fehlenden Werte nicht einfach ignorieren, sondern genau untersuchen, ob nicht vielleicht ein Muster oder ein tieferer Grund diese fehlenden Werte verursacht hat. 

- Class: text
  Output: In R verwenden wir NA (abgeleitet aus 'not available'), um fehlende Werte im statistischen Sinn zu kennzeichnen. In dieser Übung werden wir solche fehlenden Werte genauer untersuchen.

- Class: cmd_question
  Output: Fast jede Operation mit NA hat auch NA zum Ergebnis. Um das zu zeigen, erstellen wir einen Vektor c(44, NA, 5, NA) und weisen ihn der Variable x zu.
  CorrectAnswer: x <- c(44, NA, 5, NA)
  AnswerTests: omnitest(correctExpr='x <- c(44, NA, 5, NA)')
  Hint: Weisen Sie den Vektor c(44, NA, 5, NA) der Variable x zu. NA muss in Großbuchstaben geschrieben werden.

- Class: cmd_question
  Output: Gut, dann versuchen wir x mit 3 zu multiplizieren.
  CorrectAnswer: x * 3
  AnswerTests: any_of_exprs('x * 3', '3 * x')
  Hint: "Einfach: x * 3."

- Class: text
  Output: Sie haben bestimmt bemerkt, dass die Elemente des resultierenden Vektors, die aus NA entstanden sind, ebenfalls den Wert NA haben.

- Class: cmd_question
  Output: "Jetzt wird es richtig interessant: Erstellen wir einen Vektor, der 1000 zufälige Stichproben aus der Standardnormalverteilung enthält. Geben Sie y <- rnorm(1000) ein."
  CorrectAnswer: y <- rnorm(1000)
  AnswerTests: omnitest(correctExpr='y <- rnorm(1000)')
  Hint: Die Funktion rnorm() erzeugt Zufallszahlen aus der Normalverteilung. Geben Sie y <- rnorm(1000) ein.

- Class: cmd_question
  Output: "Und jetzt erstellen wir noch einen Vektor mit 1000 NAs. Der Befehl lautet z <- rep(NA, 1000)."
  CorrectAnswer: z <- rep(NA, 1000)
  AnswerTests: omnitest(correctExpr='z <- rep(NA, 1000)')
  Hint: Geben Sie z <- rep(NA, 1000) ein, um einen Vektor mit 1000 NAs zu erzeugen.

- Class: cmd_question
  Output: "Aus diesen insgesamt 2000 Elementen in y und z wählen wir nun zufällig 100 Elemente aus. Wir wissen dann natürlich nicht mehr, wie viele NAs in dieser Auswahl enthalten sind und an welcher Position die NAs stehen. Der passende Befehl lautet: my_data <- sample(c(y, z), 100)"
  CorrectAnswer: my_data <- sample(c(y, z), 100)
  AnswerTests: omnitest(correctExpr='my_data <- sample(c(y, z), 100)')
  Hint: "Die Funktion sample() zieht eine zufällige Stichprobe aus der Menge, die im ersten Argument (hier:  c(y, z)) übergeben wird. Die Stichprobengröße richtet sich dabei nach dem zweiten Argument (hier: 100). Mit dem Befehl my_data <- sample(c(y, z), 100) erzeugen wir die gewünschte Stichprobe."

- Class: cmd_question
  Output: Als erstes wollen wir herausfinden, wo die NAs in den Daten sind. Die Funktion is.na() wertet aus, ob ein Element NA ist oder nicht. Führen Sie den Befehl is.na() auf dem Datensatz my_data aus und weisen Sie das Ergebnis der Variable my_na zu.
  CorrectAnswer: my_na <- is.na(my_data)
  AnswerTests: omnitest(correctExpr='my_na <- is.na(my_data)')
  Hint: Weisen Sie das Ergebnis von is.na(my_data) der Variable my_na zu.

- Class: cmd_question
  Output: Lassen Sie nun den Inhalt von my_na ausgeben, damit wir sehen, was passiert ist.
  CorrectAnswer: my_na
  AnswerTests: omnitest(correctExpr='my_na')
  Hint: Geben Sie einfach my_na ein.

- Class: text
  Output: "Überall wo TRUE steht, hat das entsprechende Element in my_data den Wert NA. Und genauso gilt: überall wo FALSE steht, hat das entsprechende Element in my_data einen Wert der aus der Standardnormalverteilung gezogen wurde."

- Class: cmd_question
  Output: Als es in einer vorherigen Übung um logische Operatoren ging, haben wir den Operator `==` eingeführt. Mit diesem kann man zwei Objekte auf Gleichheit testen. Nun könnte man denken, dass der Ausdruck my_data == NA zum gleichen Ergebnis führen müsste wie is.na(). Probieren Sie das aus.
  CorrectAnswer: my_data == NA
  AnswerTests: omnitest(correctExpr='my_data == NA')
  Hint: Geben Sie my_data == NA ein und beobachten Sie, was passiert.

- Class: text
  Output: Als Ergebnis entstehen ausschließlich NAs. Das liegt daran, dass NA kein richtiger Wert ist, sondern eher ein Platzhalter für etwas, was nicht da ist. Daher ist der logische Ausdruck unvollständig und R liefert einen Vektor mit der gleichen Länge wie my_data der nur NAs enthält.

- Class: text
  Output: Keine Sorge, wenn Sie das ein wenig verwirrend fanden. Was Sie aber unbedingt mitnehmen sollten, ist die Warnung, bei logischen Operatoren vorsichtig zu sein, falls zu befürchten steht, dass an irgendeiner Stelle NAs auftauchen. Schon ein einzelner fehlender Wert kann die ganze Berechnung hinfällig machen.

- Class: text
  Output: So, nun aber zurück zu unserer ursprünglichen Fragestellung. Mit dem Vektor my_na, der TRUE für jedes NA und FALSE für jeden numerischen Wert zeigt, ist es leicht, die Anzahl von NAs in dem Datensatz zu bestimmen. 

- Class: text
  Output: Dafür muss man nur wissen, dass in R der Wert TRUE der Zahl 1 und FALSE der Zahl 0 entspricht. Daher können wir einfach die Summe der TRUE und FALSE Werte nehmen und erhalten die gesuchte Anzahl von TRUEs.

- Class: cmd_question
  Output: Probieren wir das aus. Verwenden Sie die Funktion sum(), um die Anzahl von TRUE Werten im Vektor my_na zu berechnen, was wiederum der Anzahl von NAs in my_data entspricht. Sie brauchen das Ergebnis diesmal nicht einer Variablen zuweisen.
  CorrectAnswer: sum(my_na)
  AnswerTests: omnitest(correctExpr='sum(my_na)')
  Hint: Geben Sie sum(my_na) ein, um die Anzahl von NAs zu berechnen.

- Class: cmd_question
  Output: Coole Sache, oder? Zum Schluss sehen wir uns die Ausgangsdaten nochmal an, um sicher zu gehen, dass das alles seine Richtigkeit hat. Lassen Sie den Inhalt von my_data ausgeben.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Geben Sie my_data ein und drücken Sie die Eingabetaste.

- Class: cmd_question
  Output: "Wie Sie mit NAs umgehen müssen, wissen Sie jetzt. Es gibt aber noch eine zweite Art von fehlenden Werten: NaN, das steht für 'not a number', also keine Zahl. Den Wert NaN kann man z. B. erzeugen, indem man 0 durch 0 teilt (zur Erinnerung: dividieren kann man mit einem einfachen Schrägstrich). Was ergibt 0 durch 0?"
  CorrectAnswer: 0/0
  AnswerTests: omnitest(correctExpr='0/0')
  Hint: Versuchen Sie es mit 0/0.

- Class: cmd_question
  Output: "Und noch eine allerletzte Frage: Die Zeichenfolge Inf steht in R für unendlich (englisch: infinity). Was passiert wenn man Inf minus Inf rechnet?"
  CorrectAnswer: Inf - Inf
  AnswerTests: omnitest(correctExpr='Inf - Inf')
  Hint: Geben Sie Inf - Inf ein. Was denken Sie, wird passieren?

- Class: text
  Output: "Auch diese Berechnung führt zu NaN, keine Zahl. Damit haben Sie auch diese Lektion erfolgreich abgeschlossen!" 
